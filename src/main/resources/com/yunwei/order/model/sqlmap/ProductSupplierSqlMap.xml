<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" 
    "http://ibatis.apache.org/dtd/sql-map-2.dtd">


<!-- 不使用namespace是由于sql搜索定位会比较方便 -->
<sqlMap>

    <resultMap id="RM.ProductSupplier" class="com.yunwei.order.model.ProductSupplier">
        <result property="productSupplierId" column="product_supplier_id"/>
        <result property="productId" column="product_id"/>
        <result property="custId" column="cust_id"/>
    </resultMap>

	<!-- 用于select查询公用抽取的列 -->
	<sql id="ProductSupplier.columns">
	    <![CDATA[
        product_supplier_id ,product_id ,cust_id 
	    ]]>
	</sql>
	
    <insert id="ProductSupplier.insert" >
    <![CDATA[
        INSERT INTO product_supplier (
        	product_supplier_id ,
        	product_id ,
        	cust_id 
        ) VALUES (
        	#productSupplierId# ,
        	#productId# ,
        	#custId# 
        )
    ]]>
    <!--
    mysql:		type="post" SELECT  select last_insert_id()
    sqlserver:	type="post" SELECT  @@identity  AS  ID
    oracle:		type="pre" 	SELECT  sequenceName.nextval AS ID FROM DUAL
    DB2:		type="pre"	values nextval for sequenceName
    -->
        <selectKey resultClass="java.lang.Long" type="post" keyProperty="productSupplierId" >
            select last_insert_id()
        </selectKey>
    </insert>

    <update id="ProductSupplier.update" >
    <![CDATA[
        UPDATE product_supplier SET
	        product_id = #productId# ,
	        cust_id = #custId# 
        WHERE 
	        product_supplier_id = #productSupplierId# 
    ]]>
    </update>

    <delete id="ProductSupplier.delete">
    <![CDATA[
        DELETE FROM product_supplier WHERE
        product_supplier_id = #productSupplierId# 
    ]]>
    </delete>
    
    <select id="ProductSupplier.getById" resultMap="RM.ProductSupplier">
	    SELECT <include refid="ProductSupplier.columns"/>
	    <![CDATA[
	        FROM product_supplier 
	        WHERE 
		        product_supplier_id = #productSupplierId# 
	    ]]>
    </select>

	<sql id="ProductSupplier.findPage.where">
	    <dynamic prepend="WHERE">
		       <isNotEmpty prepend="AND" property="productSupplierId">
		             product_supplier_id = #productSupplierId#
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="productId">
		             product_id = #productId#
		       </isNotEmpty>
		       <isNotEmpty prepend="AND" property="custId">
		             cust_id = #custId#
		       </isNotEmpty>
	    </dynamic>	
	</sql>
	 
    <select id="ProductSupplier.findPage.count" resultClass="long">
        SELECT count(*) FROM product_supplier <include refid="ProductSupplier.findPage.where"/>    
    </select>
    
    <!--
    	分页查询已经使用Dialect进行分页,也可以不使用Dialect直接编写分页
    	因为分页查询将传 #offset#,#pageSize#,#lastRows# 三个参数,不同的数据库可以根于此三个参数属性应用不同的分页实现
    -->
    <select id="ProductSupplier.findPage" resultMap="RM.ProductSupplier">
    	SELECT <include refid="ProductSupplier.columns"/> FROM product_supplier 
		<include refid="ProductSupplier.findPage.where"/>
		<isNotEmpty property="sortColumns">
			ORDER BY $sortColumns$
		</isNotEmpty>
    </select>

	
</sqlMap>

